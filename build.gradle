plugins {
  id 'java-library'
  id 'maven-publish'
  id 'signing'
}

apply plugin: 'com.adarshr.test-logger'


group = 'de.sayayi.lib'
version = '0.3.0'
description = 'Stage Runner Framework'


layout.buildDirectory = '.build'


def springVersion = '[5.3.+,6.0)'
def byteBuddyVersion = '[1.15,1.16)'


tasks.withType(JavaCompile).configureEach {
  javaCompiler = javaToolchains.compilerFor {
    languageVersion = JavaLanguageVersion.of(11)
  }

  options.encoding = 'UTF-8'
}


tasks.withType(Test).configureEach {
  javaLauncher = javaToolchains.launcherFor {
    languageVersion = JavaLanguageVersion.of(11)
  }

  defaultCharacterEncoding = 'UTF-8'
}


compileJava {
  sourceCompatibility = 11
  targetCompatibility = 11
}


java {
  withJavadocJar()
  withSourcesJar()
}


repositories {
  mavenCentral()
}


java {
  registerFeature('optional') {
    usingSourceSet sourceSets.main
  }
}


dependencies {
  // java
  compileOnlyApi 'org.jetbrains:annotations:26.0.+'

  optionalImplementation "org.springframework:spring-context:${springVersion}"
  optionalImplementation "net.bytebuddy:byte-buddy:${byteBuddyVersion}"


  // test
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.+'
  testCompileOnly 'org.projectlombok:lombok:1.18.+'

  testImplementation 'org.junit.jupiter:junit-jupiter:5.11.+'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

  // https://mvnrepository.com/artifact/org.springframework/spring-test
  testImplementation "org.springframework:spring-test:${springVersion}"
}


test {
  useJUnitPlatform()
}


compileTestJava.options.compilerArgs.add '-parameters'


jar.dependsOn test


tasks.withType(Jar).configureEach {
  includeEmptyDirs = false
  preserveFileTimestamps = true
  reproducibleFileOrder = true

  manifest {
    attributes(
        'Implementation-Vendor': 'Jeroen Gremmen',
        'Implementation-Vendor-Id': 'de.sayayi',
        'Implementation-Title': project.name,
        'Implementation-Version': project.version,
        'Created-By': System.getProperty('java.version'),
        'Built-Date': new Date().format('yyyy-MM-dd HH:mm:ss')
    )
  }

  from(rootDir) {
    include 'LICENSE'
    into 'META-INF'
    expand(
        copyright: new Date().format('yyyy'),
        version: project.version)
  }
}


javadoc.options.addStringOption('Xdoclint:none', '-quiet')


testlogger {
  theme 'mocha'
  slowThreshold 2500
}


def snapshot = version.toString().endsWith('-SNAPSHOT')
def tmpRepositoryDirectory = rootProject.layout.buildDirectory
    .dir('repository').get()
    .dir(snapshot ? 'snapshot' : 'release')
    .asFile

publishing {
  repositories {
    maven {
      name = 'mavenTemp'
      url = tmpRepositoryDirectory
    }

    maven {
      name = 'mavenCentral'
      url = snapshot
          ? 'https://oss.sonatype.org/content/repositories/snapshots'
          : 'https://oss.sonatype.org/service/local/staging/deploy/maven2'

      credentials {
        username = rootProject.findProperty('mavenCentral.username')
        password = rootProject.findProperty('mavenCentral.password')
      }
    }
  }

  publications {

    maven(MavenPublication) {
      from components.java

      pom {
        name = 'Stage Runner Library'
        description = 'Stage Runner'
        url = 'https://github.com/jgremmen/stage-runner'
        inceptionYear = '2024'

        licenses {
          license {
            name = 'Apache License, Version 2.0'
            url = 'https://www.apache.org/licenses/LICENSE-2.0'
            distribution = 'repo'
          }
        }

        developers {
          developer {
            id = 'jgremmen'
            name = 'Jeroen Gremmen'
            email = 'jeroen.gremmen@sayayi.de'
          }
        }

        scm {
          connection = 'scm:git:git://github.com/jgremmen/stage-runner.git'
          developerConnection = 'scm:git:git://github.com/jgremmen/stage-runner.git'
          url = 'https://github.com/jgremmen/stage-runner'
        }
      }
    }
  }
}


signing {
  sign publishing.publications.maven
}
